
package com.edusys.ui;

import com.edusys.utils.FaceDetector;
import com.edusys.utils.MsgBox;

import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;

import org.opencv.core.*;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.objdetect.CascadeClassifier;
import org.opencv.videoio.VideoCapture;

import javax.imageio.ImageIO;
import javax.swing.*;

import org.opencv.imgproc.Imgproc;

import static org.opencv.objdetect.Objdetect.CASCADE_SCALE_IMAGE;

/**
 * @author ngocd
 */
public class FaceDetection extends javax.swing.JDialog {

    private final String source = "data/haarcascades/haarcascade_frontalface_alt.xml";
    private final CascadeClassifier faceDetector = new CascadeClassifier(source);
    private VideoCapture videoCapture;

    public FaceDetection(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);
        setTitle("Nhận diện giương mặt.");
        init();
        setAlwaysOnTop(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        panel.setBackground(new java.awt.Color(242, 242, 242));

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 488, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 388, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FaceDetection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FaceDetection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FaceDetection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FaceDetection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FaceDetection dialog = new FaceDetection(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panel;
    // End of variables declaration//GEN-END:variables
    private void init() {
        videoCapture = new VideoCapture(0);
        if (!videoCapture.isOpened()) {
            MsgBox.alert(this, "Không thể mở camera");
            return;
        }

        new Thread(new Runnable() {
            @Override
            public void run() {
                MatOfRect mor = new MatOfRect();
                MatOfByte mob = new MatOfByte();

                Mat frame = new Mat();
                Mat frame_gray = new Mat();

                Rect[] facesArray;
                Graphics g;
                BufferedImage bimg = null;

                while (videoCapture.read(frame)) {
                    try {
                        g = panel.getGraphics();
                        Imgproc.cvtColor(frame, frame_gray, Imgproc.COLOR_BGR2GRAY);
                        Imgproc.equalizeHist(frame_gray, frame_gray);
                        double w = frame.width();
                        double h = frame.height();
                        faceDetector.detectMultiScale(frame_gray, mor, 1.1, 2, 0 | CASCADE_SCALE_IMAGE, new Size(100, 100), new Size(w, h));
                        facesArray = mor.toArray();
                        System.out.println(facesArray.length);

                        for (int i = 0; i < facesArray.length; i++) {
                            Point center = new Point((facesArray[i].x + facesArray[i].width * 0.5),
                                    (facesArray[i].y + facesArray[i].height * 0.5));
                            Imgproc.ellipse(frame,
                                    center,
                                    new Size(facesArray[i].width * 0.5, facesArray[i].height * 0.5),
                                    0,
                                    0,
                                    360,
                                    new Scalar(255, 0, 255),
                                    4,
                                    8,
                                    0
                            );
                            Mat faceROIMat = frame_gray.submat(facesArray[i]);
                            Imgproc.rectangle(frame,
                                    new Point(facesArray[i].x, facesArray[i].y),
                                    new Point(facesArray[i].x + facesArray[i].width, facesArray[i].y + facesArray[i].height),
                                    new Scalar(0, 255, 0),
                                    2
                            );
//                            Imgproc.putText(frame, "Face " + i, new Point(facesArray[i].x, facesArray[i].y), 1, 1, new Scalar(0, 255, 0));
                        }

                        int n = facesArray.length;

                        Imgcodecs.imencode(".jpg", frame, mob);
                        byte[] byteArray = mob.toArray();
                        try {
                            bimg = ImageIO.read(new ByteArrayInputStream(byteArray));
                        } catch (IOException e) {
                            e.printStackTrace();
                        }

                        // Draw BufferedImage on jPanel1
                        if (bimg != null) {
                            g = panel.getGraphics();
                            if (g != null) {
                                g.drawImage(bimg, 0, 0, panel.getWidth(), panel.getHeight(), null);
                            }
                        }

                    } catch (Exception e) {
                    }
                }
            }
        }).start();
    }
}
